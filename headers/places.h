/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _PLACES_H_RPCGEN
#define _PLACES_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif

#define MAXLEN 255

typedef char *nametype;
    /*
     location node
     with airport name, airport code, latitude, longitude, distance, list of
     location nodes for following airports
     */
struct locationNode {
	nametype airportName;
	nametype airportCode;
	double cityLat;
	double cityLong;
	double distance;
	struct locationNode *head;
};
typedef struct locationNode locationNode;
    /*
     state node
     with city and state
     */
struct stateNode {
	nametype city;
	nametype state;
};
typedef struct stateNode stateNode;
    /*
     nearestPlace return that has location node list
     */

struct nearestPlace_ret {
	int err;
	union {
		locationNode *list;
	} nearestPlace_ret_u;
};
typedef struct nearestPlace_ret nearestPlace_ret;

#define PLACES_PROG 0x31331331
#define PLACES_VERS 1

#if defined(__STDC__) || defined(__cplusplus)
#define FINDPLACE 1
extern  nearestPlace_ret * findplace_1(stateNode *, CLIENT *);
extern  nearestPlace_ret * findplace_1_svc(stateNode *, struct svc_req *);
extern int places_prog_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define FINDPLACE 1
extern  nearestPlace_ret * findplace_1();
extern  nearestPlace_ret * findplace_1_svc();
extern int places_prog_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_nametype (XDR *, nametype*);
extern  bool_t xdr_locationNode (XDR *, locationNode*);
extern  bool_t xdr_stateNode (XDR *, stateNode*);
extern  bool_t xdr_nearestPlace_ret (XDR *, nearestPlace_ret*);

#else /* K&R C */
extern bool_t xdr_nametype ();
extern bool_t xdr_locationNode ();
extern bool_t xdr_stateNode ();
extern bool_t xdr_nearestPlace_ret ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_PLACES_H_RPCGEN */
