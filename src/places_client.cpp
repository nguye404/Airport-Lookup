/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */

#include "places.h"
#include "errno.h"
#include <string>
#include <iostream>
#include <algorithm>
#include <iomanip>
using namespace std;

#define NUMBER_OF_EXPECTED_AIRPORTS (5)
/*
 creates/initializes client set the city and state names to lower case
 */
void
places_prog_1(char *host, char *city, char *state)
{
	/// convert city and state to lower case
	CLIENT *clnt;
	nearestPlace_ret  *result_1;
	stateNode  findplace_1_arg;

	for(int i = 0; i < (int)strlen(city); ++i) {
  	city[i] = tolower( city[i] ) ;
 	}

 	for(int i = 0; i < (int)strlen(state); ++i) {
  	state[i] = tolower( state[i] ) ;
 	}

#ifndef	DEBUG
	clnt = clnt_create (host, PLACES_PROG, PLACES_VERS, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror (host);
		exit (1);
	}
#endif	/* DEBUG */

	findplace_1_arg.city = city;
	findplace_1_arg.state = state;

	result_1 = findplace_1(&findplace_1_arg, clnt);
	if (result_1 == (nearestPlace_ret *) NULL) 
	{
		clnt_perror (clnt, "call failed");
	}
    /*
     if result is not an error
     go through the city and airport names.
     and print out the airportcode, city, state, name, distance
     */
	if(result_1->err != 1)
	{
		locationNode **temp;
		temp = &result_1->nearestPlace_ret_u.list;
		int size = strlen((*temp)->airportName);
		string data = (*temp)->airportName;
		string cityData = data.substr(3, size-1);
		
		state[0] = toupper(state[0]);
		state[1] = toupper(state[1]);
		
		// cout with 6 decimal places for the latitude and longtitude
		std::cout << std::fixed;
		std::cout << std::setprecision(6);
		cout <<  cityData << ", " << state << ": " ;
		cout << (*temp)->cityLat << ", " << (*temp)->cityLong << endl;
		temp = &(*temp)->head;
		
		// cout with 2 decimal places for the distance
		std::cout << std::setprecision(2);

		for(int i = 0; i < 5; i++) 
		{
			size = strlen((*temp)->airportName);
			string cityState = (*temp)->airportName;
			string city = cityState.substr(0, size-3);
			string state = cityState.substr(size-2, size-1);
			
			cout << "code=" << (*temp)->airportCode << ", ";
			cout << "name=" << city << ", ";
			cout << "state=" << state << ", ";
			cout << "distance=" << (*temp)->distance << " miles" << endl;
			
			temp = &(*temp)->head;
		}
		cout << endl;
	} 
	else 
	{
      cout << "City can't be found. Refined your query" << endl;
	}

	/* Free all data associated with this RPC */
	clnt_freeres (clnt, (xdrproc_t)xdr_nearestPlace_ret, (char*)result_1);


#ifndef	DEBUG
	clnt_destroy (clnt);
#endif	 /* DEBUG */
}

int main (int argc, char *argv[])
{
	char *host;
	char *city;
	char *state;

	if (argc < 4) {
		printf ("usage: %s server_host\n", argv[0]);
		exit (1);
	}
	host = argv[1];
	city = argv[2];
	state = argv[3];

	places_prog_1 (host, city, state);
    exit (0);
}
